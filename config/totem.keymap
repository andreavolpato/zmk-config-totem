//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <17 18>;
        };

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
            layers = <0 5 1 2 3 4>;
        };

        combo_toggle_numpad {
            bindings = <&tog 3>;
            key-positions = <27 28 29>;
        };

        combo_tab_left {
            bindings = <&kp LC(PG_UP)>;
            key-positions = <27 28>;
            layers = <1>;
        };

        combo_tab_right {
            bindings = <&kp LC(PAGE_DOWN)>;
            key-positions = <28 29>;
        };

        combo_accent_acute {
            bindings = <&kp LC(SQT)>;
            key-positions = <6 7>;
            timeout-ms = <200>;
        };

        combo_accent_grave {
            bindings = <&kp LC(GRAVE)>;
            key-positions = <7 8>;
            timeout-ms = <200>;
        };

        combo_accent_dots {
            bindings = <&kp LC(COLON)>;
            key-positions = <6 8>;
            timeout-ms = <200>;
        };

        combo_accent_round {
            bindings = <&kp LC(AT_SIGN)>;
            key-positions = <6 7 8>;
            timeout-ms = <200>;
        };

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <18 19>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
        };

        sk_rshift {
            bindings = <&sk RSHFT>;
            key-positions = <16 17>;
        };

        sk_lsft {
            bindings = <&sk LSHFT>;
            key-positions = <12 13>;
        };
    };

    behaviors {
        homerow_l: homerow_l {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_L";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <5 6 7 8 9 31 19 18 17 16 15 26 27 28 29 30 5 6 7 8 9 15 16 17 18 19 26 27 28 29 30 5 6 8 9 15 16 17 18 19 26 27 28 29 30 31 32 33 34 35 36 37>;
            hold-trigger-on-release;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <200>;
        };

        homerow_r: homerow_r {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_R";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 3 4 10 11 12 13 14 22 23 24 25 2 21 32 33 34 35 36 37 20>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <200>;
            flavor = "tap-preferred";
        };

        layer_ht: layer_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_HT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            flavor = "balanced";
        };

        coma: coma {
            compatible = "zmk,behavior-mod-morph";
            label = "COMA";
            bindings = <&kp COMMA>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot: dot {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        underscore: underscore {
            compatible = "zmk,behavior-mod-morph";
            label = "UNDERSCORE";
            bindings = <&kp UNDERSCORE>, <&kp MINUS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        layer_ht_sk: layer_ht_sk {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_HT_SK";
            bindings = <&mo>, <&sk>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        colemak-dh {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     F     ┃     P     ┃     G     ┃   ┃     J     ┃     L     ┃     U     ┃     Y     ┃     ;     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     R     ┃     S     ┃     T     ┃     D     ┃   ┃     H     ┃     N     ┃     E     ┃     I     ┃     O     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     K     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
              &kp Q              &kp W              &kp F               &kp P               &kp B              &kp J              &kp L                  &kp U               &kp Y              &kp SQT
              &homerow_l LGUI A  &homerow_l LALT R  &homerow_l LSHFT S  &homerow_l LCTRL T  &kp G              &kp M              &homerow_r RCTRL N     &homerow_r RSHFT E  &homerow_r RALT I  &homerow_r RGUI O
&kp LEFT_GUI  &kp Z              &kp X              &kp C               &kp D               &kp V              &kp K              &kp H                  &kp COMMA           &kp DOT            &kp UNDERSCORE     &kp ENTER
                                                    &layer_ht 4 ESCAPE  &layer_ht 1 SPACE   &layer_ht 3 TAB    &layer_ht 4 ENTER  &layer_ht 2 BACKSPACE  &kp DEL
            >;
        };

        nav {
            bindings = <
        &kp N1     &kp N2     &kp N3     &kp N4     &kp N5        &kp N6    &kp N7                 &kp N8     &kp N9     &kp N0
        &kp LGUI   &kp LALT   &kp LSHFT  &kp LCTRL  &caps_word    &kp LEFT  &kp DOWN               &kp UP     &kp RIGHT  &kp PERIOD
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp CAPS      &kp HOME  &kp PG_DN              &kp PG_UP  &kp END    &kp COMMA   &trans
                              &trans     &trans     &trans        &trans    &layer_ht 2 BACKSPACE  &trans
            >;
        };

        sym {
            bindings = <
        &kp EXCLAMATION  &kp AT     &kp HASH      &kp DOLLAR         &kp PERCENT         &kp AMPS   &kp DOUBLE_QUOTES  &kp LBKT              &kp RBKT               &kp QUESTION
        &kp LESS_THAN    &kp MINUS  &kp PLUS      &kp EQUAL          &kp GREATER_THAN    &kp PIPE   &kp COLON          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMICOLON
&trans  &kp CARET        &kp SLASH  &kp ASTERISK  &kp UNDERSCORE     &kp GRAVE           &kp TILDE  &kp SQT            &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp BACKSLASH  &trans
                                    &trans        &layer_ht 1 SPACE  &trans              &trans     &trans             &trans
            >;
        };

        num {
            bindings = <
        &trans  &trans        &trans        &trans     &kp KP_NUM    &trans        &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &trans
        &trans  &kp KP_MINUS  &kp KP_PLUS   &kp EQUAL  &trans        &kp KP_COMMA  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_DOT
&trans  &trans  &kp SLASH     &kp ASTERISK  &trans     &trans        &trans        &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &trans      &trans
                              &trans        &trans     &trans        &trans        &kp KP_NUMBER_0  &trans
            >;
        };

        adj {
            bindings = <
           &trans      &kp C_MUTE  &kp C_VOL_DN    &kp C_VOLUME_UP  &bt BT_SEL 2    &kp PRINTSCREEN  &kp F7  &kp F8  &kp F9  &kp F12
           &trans      &trans      &kp C_BRI_DN    &kp C_BRI_UP     &bt BT_SEL 1    &trans           &kp F4  &kp F5  &kp F6  &kp F11
&soft_off  &bt BT_CLR  &kp C_PP    &kp C_PREVIOUS  &kp C_NEXT       &bt BT_SEL 0    &trans           &kp F1  &kp F2  &kp F3  &kp F10  &soft_off
                                   &trans          &trans           &trans          &trans           &trans  &trans
            >;
        };

        graphite {
            bindings = <
        &kp B              &kp L              &kp D               &kp W               &kp Z     &kp SQT  &kp F               &kp O               &kp U              &kp J
        &homerow_l LGUI N  &homerow_l LALT R  &homerow_l LSHFT T  &homerow_l LCTRL S  &kp G     &kp Y    &homerow_r RCTRL H  &homerow_r RSHFT A  &homerow_r RALT E  &homerow_r RGUI I
&trans  &kp Q              &kp X              &kp M               &kp C               &kp V     &kp K    &kp P               &kp COMMA           &kp DOT            &kp UNDERSCORE     &trans
                                              &trans              &trans              &trans    &trans   &trans              &trans
            >;
        };

        gaming-1 {
            bindings = <
        &kp TAB    &kp Q  &kp X     &kp E      &kp R    &trans  &trans  &trans  &trans  &trans
        &kp LCTRL  &kp A  &kp W     &kp D      &kp F    &trans  &trans  &trans  &trans  &trans
&trans  &kp LSHFT  &kp Z  &kp S     &kp C      &kp V    &trans  &trans  &trans  &trans  &trans  &trans
                          &kp LALT  &kp SPACE  &mo 7    &trans  &trans  &trans
            >;
        };

        gaming-2 {
            bindings = <
        &kp ESCAPE  &kp N7  &kp N8  &kp N9  &kp T     &trans  &trans  &trans  &trans  &trans
        &trans      &kp N4  &kp N5  &kp N6  &kp G     &trans  &trans  &trans  &trans  &trans
&trans  &kp N0      &kp N1  &kp N2  &kp N3  &kp B     &trans  &trans  &trans  &trans  &trans  &trans
                            &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
